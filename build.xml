<!-- ===========================================================================

	Build file for Oddjob
	=====================

============================================================================ -->

<project default="jar" basedir="." name="Arooa">

	<!-- =================================================================== -->
	<!-- Initialization target                                               -->
	<!-- =================================================================== -->
	<target name="init">

		<tstamp/>


		<!-- =================================================================== -->
		<!-- Properties                                                          -->
		<!-- =================================================================== -->

		<property name="Name"     value="Arooa"/>
		<property name="name"     value="arooa"/>
		<property name="build.version"  value="0.0.0"/>

		<property name="oddjob.src" value="../oddjob"/>
		
		<echo message="--------------------------------------------------------------"/>
		<echo message="            ${Name} ${build.version}                                "/>
		<echo message="--------------------------------------------------------------"/>
		<echo message="Building with ${ant.version}"/>
		<echo message="using build file ${ant.file}"/>
		<echo message="oddjob.src is ${oddjob.src}"/>
		<echo message="--------------------------------------------------------------"/>

		<property name="debug"          value="on"/>
		<property name="optimize"       value="off"/>
		<property name="deprecation"    value="off"/>
		<property name="nowarn"         value="on"/>
		<!-- <property name="build.compiler" value="classic"/> -->

		<property name="src.dir"      value="./src"/>
		<property name="java.dir"     value="${src.dir}/java"/>
		<property name="test.dir"     value="./test"/>
		<property name="test.src"     value="${test.dir}/java"/>
		<property name="lib.dir"      value="./lib"/>
		<property name="test.lib"     value="${test.dir}/lib"/>
		<property name="src.docs"     value="${src.dir}/documentation"/>
		<property name="docs.dir"     value="${src.dir}/documentation/xdocs"/>
		<property name="packages"     value="org.oddjob"/>
		<property name="stylesheets.dir"  value="${src.dir}/documentation/stylesheets"/>

		<property name="build.dir"      value="./build"/>
		<property name="build.src"      value="${build.dir}/src"/>
		<property name="build.test"      value="${build.dir}/test"/>
		<property name="build.classes"     value="${build.dir}/classes"/>
		<property name="build.lib"     value="${build.dir}/lib"/>
		<property name="build.docs"     value="${build.dir}/docs"/>
		<property name="build.tools"     value="${build.dir}/tools"/>
		<property name="build.reference" value="${build.dir}/reference"/>
		<property name="build.xdocs"    value="${build.dir}/xdocs"/>
		<property name="build.javadocs" value="${build.dir}/javadocs"/>
		<property name="build.xjavadocs" value="${build.dir}/xjavadocs"/>

		<property name="jar.name"       value="${name}-${build.version}.jar"/>

		<filter token="Name"    value="${Name}"/>
		<filter token="name"    value="${name}"/>
		<filter token="version" value="${build.version}"/>
		<filter token="date"    value="${TODAY}"/>
		<filter token="log"     value="true"/>
		<filter token="verbose" value="true"/>

		<!-- =================================================================== -->
		<!-- Identify Classpath                                                 -->
		<!-- =================================================================== -->

		<path id="classpath">
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
		</path>

		<path id="test-classpath">
			<pathelement path="${build.classes}" />
			<path refid="classpath"/>
			<fileset dir="${test.lib}">
				<include name="*.jar"/>
			</fileset>
		</path>
	
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the build directory                                        -->
	<!-- =================================================================== -->
	<target name="prepare" depends="init">

		<mkdir dir="${build.dir}"/>

	</target>

	<!-- =================================================================== -->
	<!-- Prepares the source code                                            -->
	<!-- =================================================================== -->

	<target name="prepare-src-main" depends="prepare">

		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.classes}"/>
		<copy todir="${build.src}" filtering="on">
			<fileset dir="${java.dir}">
				<exclude name="**/*.gif"/>
				<exclude name="**/*.properties"/>
				<exclude name="**/*.xml"/>
			</fileset>
		</copy>
		<copy todir="${build.src}" filtering="off">
			<fileset dir="${java.dir}">
				<include name="**/*.gif"/>
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
	</target>


	<!-- =================================================================== -->
	<!-- Compiles the source directory                                       -->
	<!-- =================================================================== -->
	<target name="compile" depends="prepare-src-main"
          description="Compiles the source code">

		<copy todir="${build.classes}">
			<fileset dir="${build.src}">
				<include name="**/*.gif"/>
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>

		<echo message="Compiling with Java ${ant.java.version}, debug ${debug}, optimize ${optimize}, deprecation ${deprecation}"/>

		<javac srcdir="${build.src}"
           destdir="${build.classes}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}"
           nowarn="${nowarn}">
			<classpath refid="classpath"/>
		</javac>
	</target>

	<!-- =================================================================== 
	Creates the jar file 
    - But it doesn't really because at the moment there is no Arooa Jar.
      It copies the src to oddjob. 
	=================================================================== -->

	<target name="jar" depends="compile-tests" description="Generates the jar packages">

		<mkdir dir="${build.lib}"/>
		
	    <jar destfile="${lib.dir}/${jar.name}"
	         basedir="${build.classes}">
	    </jar>
		
	    <jar destfile="${build.lib}/${name}-tests.jar"
	         basedir="${build.test}">
	    </jar>
		
		<copy file="${build.lib}/${name}-tests.jar"
			todir="${oddjob.src}/test/lib"/>
				
		<copy todir="${oddjob.src}/lib">
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
		</copy>
			
		<copy todir="${oddjob.src}/test/lib">
			<fileset dir="${test.dir}/lib/">
				<include name="*.jar"/>
			</fileset>
		</copy>
	
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the docs                                                   -->
	<!-- =================================================================== -->
	
	<target name="prepare-docs">
		<mkdir dir="${build.xdocs}" />
		<mkdir dir="${build.docs}" />
		<mkdir dir="${build.dir}/work"/>

		<!-- make filtered copy of XML docs -->
		<copy todir="${build.xdocs}" filtering="on">
			<fileset dir="${docs.dir}"/>
		</copy>

	</target>

	<!-- =================================================================== -->
	<!-- The documentation system                                            -->
	<!-- =================================================================== -->
	<target name="docs"
          depends="init, prepare-docs"
          description="Builds the documentation">

		<xslt basedir="${build.xdocs}" destdir="${build.docs}"
             extension=".html" style="${stylesheets.dir}/site.xsl">
			<param name="header" expression="header.html"/>
			<param name="index-file" expression="sidebar.xml"/>
			<classpath refid="classpath"/>
		</xslt>

		<mkdir dir="${build.docs}/userguide"/>
		<mkdir dir="${build.docs}/userguide/images"/>
		<copy todir="${build.docs}/userguide/images" filtering="off">
			<fileset dir="${src.docs}/userguide/images"/>
		</copy>
		<copy todir="${build.docs}/userguide" filtering="on">
			<fileset dir="${src.docs}/userguide"/>
		</copy>

		<mkdir dir="${build.docs}/devguide"/>
		<mkdir dir="${build.docs}/devguide/images"/>
		<copy todir="${build.docs}/devguide/images" filtering="off">
			<fileset dir="${src.docs}/devguide/images"/>
		</copy>
		<copy todir="${build.docs}/devguide" filtering="on">
			<fileset dir="${src.docs}/devguide"/>
		</copy>

		
		
	</target>

	<!-- =================================================================== -->
	<!-- Set a variable if javadoc is already up-to-date.                    -->
	<!-- =================================================================== -->
	<target name="javadocs_check">
		<mkdir dir="${build.javadocs}"/>
		<uptodate property="javadocs.notrequired" targetfile="${build.javadocs}/packages.html" >
			<srcfiles dir= "${build.src}" includes="**/*.java,**/package.html"/>
		</uptodate>
	</target>

	<!-- =================================================================== -->
	<!-- If javadoc is already up-to-date, print a message saying so.        -->
	<!-- =================================================================== -->
	<target name="javadocs_done" if="javadocs.notrequired">
		<echo message="-------------------------------------------------------------"/>
		<echo message="Not rebuilding Javadocs, as they are up-to-date:"/>
		<echo message="  ${build.javadocs}/packages.html is more recent than"/>
		<echo message="  ${build.src}/**/*.java"/>
		<echo message="-------------------------------------------------------------"/>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the API documentation                                       -->
	<!-- =================================================================== -->
	<target name="javadocs" depends="prepare-src-main, javadocs_check, javadocs_done"
         unless="javadocs.notrequired"
         description="Builds the API documentation (javadocs)">
		<javadoc packagenames="${packages}.*"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="${Name} API"
             doctitle="${Name}">
			<classpath refid="classpath"/>
			<tag name="oddjob.element" description="Oddjob Element: "/>
			<tag name="oddjob.property" description="Oddjob Property: "/>
			<tag name="oddjob.description" description="Description: "/>
			<tag name="oddjob.example" description="Example: "/>
			<tag name="oddjob.required" description="Required: "/>
			<tag name="see"/>
			<tag name="author"/>
			<tag name="version"/>
			<tag name="since"/>
			<tag name="param"/>
			<tag name="return"/>
			<tag name="throws"/>
		</javadoc>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the API documentation (using the Sun XML doclet)            -->
	<!-- =================================================================== -->
	<target name="xjavadocs" depends="prepare-src-main, javadocs_check, javadocs_done"
      unless="javadocs.notrequired"
      description="* Generates the API documentation (using the Sun XML doclet)">
		<mkdir dir="${build.xjavadocs}"/>
		<javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.xjavadocs}"
             author="true"
             version="true"
             use="false"
             doclet="com.sun.xml.XmlDoclet"
             docletpathref="classpath">
			<classpath refid="classpath"/>
		</javadoc>
	</target>


	<!-- =================================================================== -->
	<!-- Test targets                                                       -->
	<!-- =================================================================== -->
	
	<target name="compile-tests" depends="compile" description="Compile jUnit tests">
		<mkdir dir="${build.test}"/>

		<copy todir="${build.test}" filtering="off">
			<fileset dir="${test.src}">
				<include name="**/*.xml"/>
				<include name="**/*.properties"/>
			</fileset>
		</copy>
		
		<!-- Compile tests -->
		<javac srcdir="${test.src}"
            destdir="${build.test}"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}">
			<classpath refid="test-classpath"/>
		</javac>

	</target>

	<target name="all-tests" depends="jar" description="Perform jUnit tests">
		<junit printsummary="yes" haltonfailure="yes" fork="yes">
			<classpath>
				<pathelement location="${build.test}" />
			</classpath>
			<classpath refid="test-classpath"/>
			<formatter type="plain" usefile="no" />
			<batchtest>
				<fileset dir="${build.test}">
					<include name="**/test/*TestCase.class"/>
					<include name="**/*Test.class" />
					<exclude name="**/AllTest.class" />
					<exclude name="**/*$$*Test.class" />
				</fileset>
			</batchtest>
			<sysproperty key="basedir" value="${basedir}"/>
			<sysproperty key="oddjob.home" value="${oddjob.home}"/>
			<sysproperty key="ant.file" value="${ant.file}"/>
		</junit>
	</target>

	<target name="single-test" depends="jar" description="Single JUnit test">
		<junit printsummary="yes" haltonfailure="yes" fork="yes">
			<classpath>
				<pathelement location="${build.test}" />
			</classpath>
			<classpath refid="test-classpath"/>
			<formatter type="plain" usefile="no" />
			<test name="${junit.test}"/>
			<sysproperty key="basedir" value="${basedir}"/>
			<sysproperty key="oddjob.home" value="${oddjob.home}"/>
			<sysproperty key="ant.file" value="${ant.file}"/>
		</junit>
	</target>
	
	<!-- =================================================================== -->
	<!-- Prepares the source distribution                                    -->
	<!-- =================================================================== -->
	<target name="dist-src" depends="init" if="dist.src.dir"
          description="Prepares the source distribution">
		
		<property name="to.dir" value="${dist.src.dir}/${name}"/>
			
		<copy todir="${to.dir}/src" filtering="off">
			<fileset dir="${src.dir}"/>
		</copy>

		<copy todir="${to.dir}/lib" filtering="off">
			<fileset dir="${lib.dir}"/>
		</copy>

		<copy todir="${to.dir}/test" filtering="off">
			<fileset dir="${test.dir}"/>
		</copy>

		<copy todir="${to.dir}">
			<fileset dir=".">
				<include name="build.xml"/>
			</fileset>
		</copy>

	</target>

	<!-- =================================================================== -->
	<!-- Prepares the binary distribution                                    -->
	<!-- =================================================================== -->
	<target name="dist-bin" depends="init">
		
		<echo message="Nothing to do."/>

	</target>
	

	<!-- =================================================================== -->
	<!-- Clean targets                                                       -->
	<!-- =================================================================== -->
	<target name="clean" depends="init" description="Cleans the build directories">
		<delete dir="${build.dir}"/>
		<delete>
			<fileset dir="${lib.dir}">
				<include name="${name}*.jar"/>
			</fileset>
		</delete>
	</target>

</project>

<!-- End of file -->
